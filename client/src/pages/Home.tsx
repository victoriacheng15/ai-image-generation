import { useState, useEffect } from "react";
import { Loader, Card, FormField } from "../components";

function Home() {
	const [loading, setLoading] = useState(false);
	const [allPosts, setAllPosts] = useState([]);
	const [searchText, setSearchText] = useState("");
	const [searchTimeout, setSearchTimeout] = useState(0);
	const [searchedResults, setSearchedResults] = useState([]);

	const fetchPosts = async () => {
		setLoading(true);
		try {
			const res = await fetch(`${import.meta.env.VITE_BACKEND}/api/v1/posts`);
			if (res.ok) {
				const results = await res.json();
				setAllPosts(results.data);
			}
		} catch (error) {
			alert(error);
		} finally {
			setLoading(false);
		}
	};

	useEffect(() => {
		fetchPosts();
	}, []);

	const handleSearchChange = (e: { target: { value: string } }) => {
		const text = e.target.value.toLowerCase();
		clearTimeout(searchTimeout);
		setSearchText(text);

		setSearchTimeout(
			setTimeout(() => {
				const searchedResults = allPosts.filter((item) =>
					// @ts-ignore
					item.prompt
						.toLowerCase()
						.includes(text),
				);
				setSearchedResults(searchedResults);
			}, 500),
		);
	};

	return (
		<>
			<h1 className="text-3xl font-extrabold">The Community Showcase</h1>
			<p className="mt-2 text-base">
				Browse through a collection if imaginative and visually stunning images
				generated by DALLE-E AI
			</p>
			<div className="mt-16 mb-8">
				<FormField
					label="Search posts:"
					type="text"
					name="text"
					placeholder="Search something.."
					value={searchText}
					handleChange={handleSearchChange}
				/>
			</div>
			{loading ? (
				<Loader />
			) : (
				<>
					{searchText && (
						<h2 className="mb-3 text-xl font-medium my-4">
							Showing results for{" "}
							<span className="text-green-500">{searchText}</span>{" "}
						</h2>
					)}
					<section className="grid grid-cols-1 gap-4 lg:grid-cols-4 sm:grid-cols-4 xs:grid-cols-2">
						{searchText ? (
							<RenderCard
								data={searchedResults}
								title="No search results found"
							/>
						) : (
							<RenderCard data={allPosts} title="No posts found" />
						)}
					</section>
				</>
			)}
		</>
	);
}

export default Home;

// TODO:
// remove ts-ignore later
// rome-ignore lint/suspicious/noExplicitAny: <explanation>
function RenderCard({ data, title }: { data: any[] | string; title: string }) {
	if (data?.length > 0) {
		// @ts-ignore
		return data.map((post) => <Card key={post._id} {...post} />);
	}

	return <h2 className="mt-5 text-xl font-bold text-blue-800">{title}</h2>;
}
